clockLijstje = [
	|file:///home/sander/Dropbox/Afstuderen%20UvA/graphs/untitled/src/verwerkt/coolclock/prepared/coolclock.js|,
	|file:///home/sander/Dropbox/Afstuderen%20UvA/graphs/untitled/src/verwerkt/coolclock/prepared/moreskins.js|,
	|file:///home/sander/Dropbox/Afstuderen%20UvA/graphs/untitled/src/verwerkt/coolclock/prepared/jquery.js|,
	|file:///home/sander/Dropbox/Afstuderen%20UvA/graphs/untitled/src/verwerkt/coolclock/prepared/demos/demo2.js|
];

pesClock = createCleanPessimisticCallGraph(clockLijstje);
optclock = createCleanOptimisticCallGraph(clockLijstje);

loc clockCallGraph = |file:///home/sander/Dropbox/Afstuderen%20UvA/graphs/untitled/src/verwerkt/coolclock/instrumented-incl/callmap.json|;
printStatistics(pesClock.calls, clockCallGraph);
printStatistics(optclock, clockCallGraph);

dynClock = convertJsonToGraph(clockCallGraph);
possibleIncorrectClock = generatePossibleIncorrectCallbackEdges(clockLijstje);

filteredPesClock = filterFrameworkEdges(pesClock.calls, {"jquery"});
filteredOptClock = filterFrameworkEdges(optclock, {"jquery"});

printStatistics(filteredPesClock, clockCallGraph);
printStatistics(filteredOptClock, clockCallGraph);

pesClockString = convertVertexGraphToStringGraph(pesClock.calls);
filteredPesClockString = convertVertexGraphToStringGraph(filteredPesClock);
dynClock = convertJsonToGraph(clockCallGraph);

pessDynDiff = filteredPesClockString - dynClock;
nonNativeDiffs = filterNativeEdges(pessDynDiff)
nativeDiff = pessDynDiff - nonNativeDiffs;